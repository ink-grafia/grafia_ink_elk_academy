input {
	rabbitmq {
		host => rabbit
		ack => false
		durable => true
		user => 'admin'
		password => 'x#UR46pC'
		queue => 'udp_443'
	}
}

filter {
         grok {
          match => { "message" => [
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} (?<_definite>sshd)(?:\[%{POSINT:[event][idx]}\])?: %{DATA:[request][basic]} %{DATA:[request][definite]} for (invalid user )?%{DATA:[account][from][name]} from %{IPORHOST:[network][from][ip]} port %{NUMBER:[network][to][port]} ssh2(: %{GREEDYDATA:[respond][basic]})?",
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} (?<_definite>sshd)(?:\[%{POSINT:[event][idx]}\])?: %{DATA:[request][basic]} user %{DATA:[account][from][name]} from %{IPORHOST:[network][from][ip]}",
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} (?<_definite>sshd)(?:\[%{POSINT:[event][idx]}\])?: Did not receive identification string from %{IPORHOST:[network][from][ip]}",
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} (?<_definite>sshd)(?:\[%{POSINT:[event][idx]}\])?: (?<_subject>pam_unix\(sshd:auth\): authentication failure; .+ (user=(?<_user>\w+))?)",
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} (?<_definite>sudo)(?:\[%{POSINT:[event][idx]}\])?: \s*%{DATA:[account][from][privilege]} :( %{DATA:[_subject]} ;)? TTY=%{DATA:[request][basic]} ; PWD=%{DATA:[account][from][password]} ; USER=%{DATA:[account][from][name]} ; COMMAND=%{GREEDYDATA:[respond][basic]}",
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} (?<_definite>groupadd)(?:\[%{POSINT:[event][idx]}\])?: new group: name=%{DATA:[account][group][name]}, GID=%{NUMBER:[account][group][idx]}",
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} (?<_definite>useradd)(?:\[%{POSINT:[event][idx]}\])?: new user: name=%{DATA:[account][to][name]}, UID=%{NUMBER:[account][to][idx]}, GID=%{NUMBER:[account][group][idx]}, home=%{DATA:[account][to][path]}, shell=%{DATA:[respond][basic]}$",
                "%{SYSLOGTIMESTAMP:[date][event]} %{SYSLOGHOST:[event][host]} %{DATA:[request][basic]}(?:\[%{POSINT:[event][idx]}\])?: %{GREEDYMULTILINE:[_subject]}"
                ] }
          pattern_definitions => {
            "GREEDYMULTILINE"=> "(.|\n)*"
          }
       }

       if [_definite] and ![request][basic] {
         mutate {
            add_field => {
                "[event][basic]" => "%{_definite}"
            }
         }
       }

       if [_user] {
        mutate {
          add_field => {
            "[account][from][name]" => "%{_user}"
          }
        }
       }

       if [_subject] {
        mutate {
          add_field => {
            "[subj]" => "%{_subject}"
          }
        }
       }

       date {
          match => [ "[date][event]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
          target => "[date][event]"
          add_field => { "[date][received]" => "%{@timestamp}" }
        }
        date {
            match => [ "[date][received]", "ISO8601" ]
            target => "[date][received]"
        }

        if [network][from][ip] == "" or [network][from][ip] == "-" {
          mutate {
            remove_field => ["[network][from][ip]"]
          }
        }

  if [network][from][ip] and [network][from][ip] != "::1" {
          cidr {
            add_tag => [ "_source_private" ]
            address => [ "%{[network][from][ip]}" ]
            network => [ "10.0.0.0/8","172.16.0.0/12","192.168.0.0/16","127.0.0.1/32" ]
          }
          if "_source_private" in [tags] {
            mutate {
              add_field => {
                "[network][from][basic]" => ""
              }
              remove_tag => [ "_source_private" ]
            }
          } else {
            mutate {
              add_field => {
                "[network][from][basic]" => ""
              }
            }
          }
        }

        if [network][from][basic] == "" {
          geoip {
            source => [ "[network][from][ip]" ]
            target => [ "geo_from" ]
            fields => ["city_name", "continent_code", "country_code2", "country_code3", "country_name", "dma_code", "latitude", "longitude", "postal_code", "region_name", "timezone"]
            add_field => { "[geo][from][position]" => "%{[geo_from][latitude]}, %{[geo_from][longitude]}" }
          }

          if [geo_from][timezone] {
            mutate { add_field => { "[geo][from][code]" => "%{[geo_from][timezone]}" } }
          }
          if [geo_from][continent_code] {
            mutate { add_field => { "[geo][from][code]" => "%{[geo_from][continent_code]}" } }
          }
          if [geo_from][country_code2] {
            mutate { add_field => { "[geo][from][code]" => "%{[geo_from][country_code2]}" } }
          }
          if [geo_from][country_code3] {
            mutate { add_field => { "[geo][from][code]" => "%{[geo_from][country_code3]}" } }
          }
          if [geo_from][postal_code] {
            mutate { add_field => { "[geo][from][code]" => "%{[geo_from][postal_code]}" } }
          }
          if [geo_from][dma_code] {
            mutate { add_field => { "[geo][from][code]" => "%{[geo_from][dma_code]}" } }
          }

          if [geo_from][country_name] {
            mutate { add_field => { "[geo][from][country]" => "%{[geo_from][country_name]}" } }
          }
          if [geo_from][region_name] {
            mutate { add_field => { "[geo][from][region]" => "%{[geo_from][region_name]}" } }
          }
          if [geo_from][city_name] {
            mutate { add_field => { "[geo][from][city]" => "%{[geo_from][city_name]}" } }
          }

          mutate { remove_field => ["geo_from"] }
        }

       if [account][from][name] == "" or [account][from][name] == "-" {
         mutate {
           update => { "[account][from][name]" => "anonymous" }
         }
       }

       mutate {
        add_field => {
          "[source][basic]" => "syslog,Linux,CentOS"
          "[source][host]" => "%{host}"
        }
        remove_field => [ "message", "path", "@version", "@timestamp", "tags", "host", "type",
        "_definite", "_user", "_subject" ]
        lowercase => [ "[account][from][name]", "[account][to][name]" ]
      }
      mutate {
        split => {
          "[source][basic]" => ","
        }
      }
}

output {
	elasticsearch {
		hosts => "https://es-master-0.example.com"
		user => "logstash"
		password => "logstash"
		ssl => true
		ssl_certificate_verification => true
		truststore => "/usr/share/logstash/truststore.jks"
		truststore_password => changeit
	}
}
